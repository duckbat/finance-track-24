// Own API Hooks
// Done
import {useEffect, useState} from 'react';
import {
  Comment,
  Like,
  Transaction,
  TransactionWithOwner,
  User,
} from '../../../server/types/DBTypes';
import {fetchData} from '../lib/functions';
import {Credentials} from '../../../server/types/LocalTypes';
import {
  LoginResponse,
  TransactionResponse,
  MessageResponse,
  UploadResponse,
  UserResponse,
} from '../../../server/types/MessageTypes';

const useTransaction = () => {
  const [transactionArray, setTransactionArray] = useState<
    TransactionWithOwner[]
  >([]);

  const getTransaction = async () => {
    try {
      const TransactionItems = await fetchData<Transaction[]>(
        import.meta.env.VITE_TRANSACTION_API + '/transaction',
      );
      //Get usernames (transaction owners) for all media files from auth api
      const itemsWithOwner: TransactionWithOwner[] = await Promise.all(
        TransactionItems.map(async (item) => {
          const owner = await fetchData<User>(
            import.meta.env.VITE_AUTH_API + '/users/' + item.user_id,
          );
          const itemWithOwner: TransactionWithOwner = {
            ...item,
            username: owner.username,
          };
          return itemWithOwner;
        }),
      );
      setTransactionArray(itemsWithOwner);
      console.log('transactionArray updated:', itemsWithOwner);
    } catch (error) {
      console.log('getTransaction failed', error);
    }
  };

  useEffect(() => {
    getTransaction();
  }, []);

  const postTransaction = (
    file: UploadResponse,
    inputs: Record<string, string>,
    token: string,
  ) => {
    // TODO: suitable object for Transaction APi,
    // the type is Transaction without transaction_id, user_id,
    // thumbnail and created_at. All of those are generated by the API.
    const transaction: Omit<
      Transaction,
      'transaction_id' | 'user_id' | 'thumbnail' | 'created_at'
    > = {
      title: inputs.title,
      description: inputs.description,
      filename: file.data.filename,
      filesize: file.data.filesize,
      media_type: file.data.media_type,
      owner: {
        user_id: '',
        profile_pic: null,
        username: '',
        password: '',
        email: '',
        user_level_id: 0,
        created_at: '',
      },
      amount: 0,
      likes_count: 0,
      comments_count: 0,
    };

    //TODO: post the data to Media API and get the data as TransactionResponse
    const options = {
      method: 'POST',
      headers: {
        Authorization: 'Bearer' + token,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(transaction),
    };
    return fetchData<TransactionResponse>(
      import.meta.env.VITE_TRANSACTION_API + '/transaction/',
      options,
    );
  };

  return {transactionArray, postTransaction};
};

const useUser = () => {
  // TODO: implement network functions for auth server user endpoints
  const getUserByToken = async (token: string) => {
    const options = {
      headers: {
        Authorization: 'Bearer ' + token,
      },
    };
    return await fetchData<UserResponse>(
      import.meta.env.VITE_AUTH_API + '/users/token/',
      options,
    );
  };

  const postUser = async (user: Record<string, string>) => {
    const options: RequestInit = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(user),
    };

    await fetchData<UserResponse>(
      import.meta.env.VITE_AUTH_API + '/users',
      options,
    );
  };

  const getUsernameAvailable = async (username: string) => {
    return await fetchData<{available: boolean}>(
      import.meta.env.VITE_AUTH_API + '/users/username/' + username,
    );
  };

  const getEmailAvailable = async (email: string) => {
    return await fetchData<{available: boolean}>(
      import.meta.env.VITE_AUTH_API + '/users/email/' + email,
    );
  };

  const getUserById = async (user_id: number) => {
    return await fetchData<User>(
      import.meta.env.VITE_AUTH_API + '/users/' + user_id,
    );
  };

  return {
    getUserByToken,
    postUser,
    getUsernameAvailable,
    getEmailAvailable,
    getUserById,
  };
};

const useAuthentication = () => {
  const postLogin = async (creds: Credentials) => {
    return await fetchData<LoginResponse>(
      import.meta.env.VITE_AUTH_API + '/auth/login',
      {
        method: 'POST',
        body: JSON.stringify(creds),
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );
  };

  return {postLogin};
};

const useFile = () => {
  const postFile = async (file: File, token: string) => {
    const formData = new FormData();
    formData.append('file', file);
    const options = {
      method: 'POST',
      headers: {
        Authorization: 'Bearer ' + token,
      },
      body: formData,
    };
    return await fetchData<UploadResponse>(
      import.meta.env.VITE_UPLOAD_SERVER + '/upload',
      options,
    );
  };

  return {postFile};
};

const useLike = () => {
  const postLike = async (transaction_id: number, token: string) => {
    // Send a POST request to /likes with object { transaction_id } and the token in the Auth header.
    const options: RequestInit = {
      method: 'POST',
      headers: {
        Authorization: 'Bearer ' + token,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({transaction_id}),
    };
    return await fetchData<MessageResponse>(
      import.meta.env.VITE_TRANSACTION_API + '/likes',
      options,
    );
  };

  const deleteLike = async (like_id: number, token: string) => {
    // Send a DELETE request to /likes/:like_id with the token in the Auth header.
    const options: RequestInit = {
      method: 'DELETE',
      headers: {
        Authorization: 'Bearer ' + token,
      },
    };
    return await fetchData<MessageResponse>(
      import.meta.env.VITE_TRANSACTION_API + '/likes' + like_id,
      options,
    );
  };

  const getCountByTransactionId = async (transaction_id: number) => {
    // Send a GET request to /likes/:transaction_id to get the number of likes
    return await fetchData<{count: number}>(
      import.meta.env.VITE_TRANSACTION_API + '/likes/count/' + transaction_id,
    );
  };

  const getUserLike = async (transaction_id: number, token: string) => {
    // Send a GET request to /likes/bymedia/user/:transaction_id to get the user's like on the transaction.
    const options: RequestInit = {
      method: 'GET',
      headers: {
        Authorization: 'Bearer ' + token,
      },
    };
    return await fetchData<Like>(
      import.meta.env.VITE_TRANSACTION_API +
        '/likes/bytransaction/user/' +
        transaction_id,
      options,
    );
  };

  return {postLike, deleteLike, getCountByTransactionId, getUserLike};
};

const useComment = () => {
  const postComment = async (
    comment_text: string,
    transaction_id: number,
    token: string,
  ) => {
    // TODO: Send a POST request to /comment with the comment object and the token in the Auth header.
    const options: RequestInit = {
      method: 'POST',
      headers: {
        Authorization: 'Bearer ' + token,
        'Conent-Type': 'application/json',
      },
      body: JSON.stringify({comment_text, transaction_id}),
    };
    return await fetchData<MessageResponse>(
      import.meta.env.VITE_TRANSACTION_API + '/comments',
      options,
    );
  };

  const {getUserById} = useUser();

  const getCommentsByTransactionId = async (transaction_id: number) => {
    //TODO: Send a GET request to /comments/:transaction_id to get the comments.
    const comments = await fetchData<Comment[]>(
      import.meta.env.VITE_TRANSACTION_API +
        '/comments/bytransaction/' +
        transaction_id,
    );
    //Get usernames for all comments from auth api
    const commentsWithUsername = await Promise.all<
      Comment & {username: string}
    >(
      comments.map(async (comment) => {
        const user = await getUserById(Number(comment.user_id)); // Convert comment.user_id to a number
        return {...comment, username: user.username};
      }),
    );
    return commentsWithUsername;
  };
  return {postComment, getCommentsByTransactionId};
};

export {
  useTransaction,
  useUser,
  useAuthentication,
  useFile,
  useLike,
  useComment,
};
